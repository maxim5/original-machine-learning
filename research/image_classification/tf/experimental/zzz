data = [
  ([40, 50, 55, 60, 63, 65, 68, 67, 69, 70, 72], 72),
  ([30, 34, 40, 42, 46, 46, 50, 52, 53, 55, 54], 55),
  ([32, 40, 45, 48, 54, 56, 57, 58, 60, 61, 61], 61),
  ([37, 45, 51, 54, 57, 60, 59, 63, 64, 67, 68], 68),
  ([44, 48, 53, 59, 63, 63, 64, 64, 68, 69, 70], 70),
  ([42, 49, 53, 57, 60, 63, 62, 65, 66, 68, 68], 68),
  ([41, 47, 55, 58, 61, 62, 65, 67, 69, 71, 71], 71),
  ([36, 43, 50, 52, 57, 61, 61, 62, 64, 66, 69], 69),
  ([20, 25, 30, 34, 38, 42, 46, 50, 53, 55, 54], 55),
  ([25, 27, 35, 40, 43, 47, 51, 52, 55, 56, 57], 57),
  ([29, 34, 40, 45, 50, 53, 56, 57, 57, 60, 59], 60),
  ([10, 16, 25, 30, 32, 35, 36, 35, 37, 37, 37], 37),
  ([41, 51, 52, 56, 61, 62, 65, 66, 68, 67, 69], 69),
  ([45, 48, 54, 57, 60, 62, 62, 65, 65, 66, 66], 66),
  ([22, 30, 33, 37, 39, 40, 45, 47, 48, 48, 51], 51),
  ([42, 51, 55, 56, 58, 61, 62, 64, 65, 66, 68], 68),
  ([34, 43, 45, 50, 52, 55, 61, 61, 60, 66, 64], 66),
  ([20, 24, 25, 30, 31, 33, 36, 37, 40, 42, 43], 43),
  ([44, 51, 55, 58, 60, 63, 65, 64, 66, 67, 67], 67),
  ([41, 49, 55, 58, 61, 61, 66, 67, 68, 68, 71], 71),
  ([34, 45, 48, 53, 55, 57, 61, 62, 63, 63, 64], 64),
]


N = 11
X = np.array([item[0][:N] for item in data])
Y = np.array([[item[1]] for item in data])

predictor = LinearCurvePredictor()
for i in xrange(X.shape[0]):
  predictor.predict(X[i])
  print 'true=%.3f' % Y[i]
  predictor.add_curve(X[i], Y[i])





if __name__ == "__main__":
  from kernel import *
  p = np.random.standard_normal((5, 3))
  v = np.random.standard_normal(5)
  mean = np.mean(v)
  mean = np.append(v, mean)
  ucb = UpperConfidenceBound(p, v, kernel=RadialBasisFunction(), mu_prior=mean)


if __name__ == "__main__":
  def conv_layer(size, num):
    return [[size, size, num]]

  my_spec = {
    1: {
      1: {
        'filters': conv_layer(size=choice([3, 5, 7]), num=choice([24, 32, 36])),
        'pools': [2, 2],
        'activation': choice(['relu', 'relu6', 'elu', 'prelu', 'leaky_relu']),
        'dropout': uniform(0.85, 1.0),
      },
    }
  }

  parsed = ParsedSpec(my_spec)
  leaves = parsed._leaves
  print leaves
  num = len(leaves)

  import numpy as np
  points = np.random.uniform(size=(num, ))
  print points

  print parsed.instantiate(points)






from image_classification.tf.spec.parsed_spec import ParsedSpec
import numpy as np

parsed = ParsedSpec(hyper_params_generator)
print parsed.size()

for i in xrange(10):
  value = np.random.uniform(0, 1, size=(parsed.size(),))
  print parsed.instantiate(value)


from image_classification.tf.spec.parsed_spec import ParsedSpec
import numpy as np

parsed = ParsedSpec(augment_spec)
print parsed.size()

for i in xrange(10):
  value = np.random.uniform(0, 1, size=(parsed.size(),))
  print parsed.instantiate(value)

